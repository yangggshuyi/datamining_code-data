ggplot(admittedPct, aes(admittedpct)) +
geom_histogram(bins =15, fill = "dodgerblue",alpha = 0.7) +
labs(y ="学校数量", x = "录取率", title = "申请人数Top100大学的录取率分布直方图") +
plot_theme
# 找到极大极小值
admittedPct[admittedPct$admittedpct<0.3,];admittedPct[admittedPct$admittedpct>0.98,]
####### ####### ####### 申请学校预处理（3）
####### ####### ####### 申请学校排名
# TOP50的学校（除去国内清华北大复旦）
universities <- read.table("/Users/mac/Desktop/狗熊会/留学数据/data/大学排名的副本.txt", header = F, sep="\n")$V1
universities1 <- paste0("", gsub("，", "|", universities), "")
top10university <- NULL;top10_50university <- NULL;top50university <- NULL
top51_100university <- NULL;top101_200university <- NULL;top100university <- NULL
College_apply_new_ = gsub(pattern = "\\(|\\{|\\}", replacement = " ", x = descriptive$college_apply)
# 匹配学校世界排名
for(i in 1:length(College_apply_new_)){
top10university[i] = grepl(College_apply_new_[i],
paste0(universities1[1:10],collapse = "|"))
top10_50university[i] = grepl(College_apply_new_[i],
paste0(universities1[11:47],collapse = "|"))
top51_100university[i] = grepl(College_apply_new_[i],
paste0(universities1[48:61],collapse = "|"))
top101_200university[i] = grepl(College_apply_new_[i],
paste0(universities1[62:76],collapse = "|"))
}
table(top10university)
# 划分为三挡
collegerank <- rep("Others",dim(descriptive)[1])
collegerank[top10university] <- "Top10"
collegerank[top10_50university] <- "Top10_50"
collegerank[top51_100university] <- "Top51_100"
collegerank[top101_200university] <- "Top101_200"
descriptive$CollegeRank <- collegerank
table(descriptive$CollegeRank)   # 申请top 10 学校的人太少了。。。
# 划分为两档
descriptive$CollegeRankTop50 <- as.factor(ifelse(descriptive$CollegeRank=="Others","Others","Top200"))
####### ####### ####### 申请学校预处理（4）
####### ####### ####### 申请学校地区
Universities <- function(path){   # 学校名单——地区
# 读取数据
fileNames <- dir(path) # 获取文件名
filePath <- sapply(fileNames, function(x){paste(path,x,sep='/')}) # 生成读取文件路径
data <- lapply(filePath, function(x){read.csv(x,header = F)}) # 结果为list
# 转化为vector
universities <- as.vector(unlist(data[[1]]))
for(i in 2:length(data)){
universities <- c(universities,as.vector(unlist(data[[i]])))
}
# 删去括号
Univ <- NULL
for(i in 1:length(universities)){
x <- as.character(universities[i])
Univ[i] <- strsplit(x, " \\(")[[1]][1]
}
# 匹配缩写
SuoXie <- read.table("常见美国大学缩写2.txt", header = T)
DstSuoxie <- as.character(SuoXie$ysuoxie[SuoXie$yquancheng %in% Univ])
# 返回数据
return(c(Univ,DstSuoxie))
}
setwd("/Users/mac/Desktop/狗熊会/留学数据/data/所有大学&地区")
path <- paste0(getwd(),"/East Coast")
EastCoast <- Universities(paste0(getwd(),"/East Coast"))
GulfCoast <- Universities(paste0(getwd(),"/Gulf Coast"))
MidWest <- Universities(paste0(getwd(),"/Mid-west"))
RockyMountains <- Universities(paste0(getwd(),"/Rocky Mountains"))
WestCoast <- Universities(paste0(getwd(),"/West Coast"))
######### 对原数据进行匹配
temp <- rep(NA,dim(descriptive)[1])
temp[tolower(descriptive$college_apply) %in% tolower(EastCoast)] <- "EastCoast"
temp[tolower(descriptive$college_apply) %in% tolower(GulfCoast)] <- "GulfCoast"
temp[tolower(descriptive$college_apply) %in% tolower(MidWest)] <- "MidWest"
temp[tolower(descriptive$college_apply) %in% tolower(RockyMountains)] <- "RockyMountains"
temp[tolower(descriptive$college_apply) %in% tolower(WestCoast)] <- "WestCoast, AK, HI"
table(temp)
descriptive$Districts <- temp
################################################
###                   原始学校               ###
################################################
####### ####### ####### 原始学排名预处理（1）
# 读入学校排名数据
universities <- read.table("/Users/mac/Desktop/狗熊会/留学数据/data/QS大学排名前500（中国）.txt", header = F, sep="\n")$V1
universities1 <- paste0("", gsub(" ", "|", universities), "")
# 匹配学校
top100university <- NULL;top100_500university <- NULL;top500university <- NULL
descriptive$college_before <- gsub(pattern = "\\(|\\{|\\}|\\*", replacement = "", x = descriptive$college_before)
descriptive$college_before <- gsub(pattern = " ", replacement = "", x = descriptive$college_before)
descriptive$college_before[descriptive$college_before==""] <- NA
for(i in 1:length(descriptive$college_before)){
top100university[i] = grepl(descriptive$college_before[i],
paste0(universities1[1:11],collapse = "|"))
top100_500university[i] = grepl(descriptive$college_before[i],
paste0(universities1[12:27],collapse = "|"))
}
# 得到原始学校排名变量
descriptive$Before_CollegeRank <- cut(top100university*2 + top100_500university,
breaks = c(-0.1,0.9,1.9,3), labels = c("Others","Top100~500","Top100"))
# 计算录取率
ifadmitted = ifelse(descriptive$offertype == "Admitted",1,0)
admittedPct = aggregate(ifadmitted,list(descriptive$Before_CollegeRank,descriptive$CollegeRank),mean)
admittedPct$Group.1 <- factor(admittedPct$Group.1,levels = c("Top100","Top100~500","Others"))
# 画图
(barplot6 <- ggplot(admittedPct, aes(x = Group.2, y = x, fill = Group.1)) +
geom_bar(show.legend = T, stat = 'identity',
alpha = 0.7, position = 'dodge') +
labs(x = "申请学校-世界排名", y = "录取率", title = "学校排名与录取率") +
#scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual("原始学校-世界排名", values = rep(c("dodgerblue","cyan3","#d3d3d3"),3))+
geom_text(label = paste(round(admittedPct$x, 2)*100, "%", sep=''),
colour = "black", position = position_dodge(1),size = 4, vjust = -0.8)  +
geom_hline(aes(yintercept = mean(ifadmitted)),col = "orange",lwd = 0.6)+
geom_text(label = paste(round(mean(ifadmitted), 2)*100, "%", sep=''),
colour = "orange",x = 3.5, y = 0.65, size = 5.8, vjust =  - 0.5)  +
plot_theme)
################################################
###                  GRE成绩                 ###
################################################
####### ####### ####### GRE 预处理
# GRE成绩换算
gre_plot_dt <- descriptive[,c("gre_total", "gre_v","gre_q")]
for(i in 1:dim(gre_plot_dt)[2]){
gre_plot_dt[,i] <- as.numeric(gre_plot_dt[,i])
}
# 转换旧版gre verbal 成绩
gre_old_v = cut(gre_plot_dt[which(gre_plot_dt$gre_total > 340),]$gre_v ,
breaks = c(360,370,380,400,410,420,440,450,470,490,500,520,530,550,560,580,590,610,620,640,650,670,690,700,730,750,800),
labels = c(144:146,148:170))
gre_plot_dt[which(gre_plot_dt$gre_total > 340),]$gre_v = as.numeric(as.character(gre_old_v))
# 转换旧版gre quantitative 成绩
gre_old_q = cut(gre_plot_dt[which(gre_plot_dt$gre_total > 340),]$gre_q ,
breaks = c(720, 730, 750,Inf),
labels = c(168,169,170))
gre_plot_dt[which(gre_plot_dt$gre_total > 345),]$gre_q = as.numeric(as.character(gre_old_q))
gre_plot_dt[which(gre_plot_dt$gre_q>170),] <- NA
# 总成绩
gre_plot_dt[which(gre_plot_dt$gre_total > 340),]$gre_total = rowSums(gre_plot_dt[which(gre_plot_dt$gre_total > 340), 2:3])
colnames(gre_plot_dt) <- c("gre_total_new", "gre_v_new","gre_q_new")
# 处理异常值
descriptive_gre <- cbind(descriptive,gre_plot_dt)
descriptive_gre[descriptive_gre$index_origin== "1427",]$gre_total_new <-  as.numeric(substr(descriptive_gre[descriptive_gre$index_origin== "1427",]$gre_raw,1,3))
####### ####### ####### ####### ####### #######
####### ####### ####### GRE 对于录取率的影响 (1)
# gre成绩分段
gre_total_dis <- cut(descriptive_gre$gre_total_new,
breaks = c(0,315,320,325,330,350),
labels = c("<=315","315-320","320-325","325-330",">330"))
table(gre_total_dis)
# 计算录取率
ifadmitted = ifelse(descriptive_gre$offertype == "Admitted",1,0)
admittedPct = aggregate(ifadmitted,list(gre_total_dis),mean)
colnames(admittedPct) = c("GRE","admittedpct")
# 画图
plot_title <- labs(x = "", y = "", title = "\n不同GRE成绩的平均录取率")
ggplot(admittedPct, aes(x = GRE, y = admittedpct)) +
geom_bar(stat='identity',position='dodge', alpha = I(0.75), fill = "dodgerblue") +
labs(x="GRE成绩", y=" ", title="") +
geom_text(label = paste(round(admittedPct$admittedpct, 2)*100, "%", sep=''),
colour = "black", position = position_dodge(1),size = 4, vjust = -0.8)  +
geom_hline(aes(yintercept = mean(ifadmitted)),col = "orange",lwd = 1)+
geom_text(label = paste(round(mean(ifadmitted), 2)*100, "%", sep=''),
colour = "orange",x = 0.68, y = 0.7, size = 5.8, vjust =  - 0.5)  +
scale_y_continuous(limits = c(0,0.8))+
plot_title + plot_theme
summary(descriptive_gre)
descriptive$gre_total_new <- descriptive_gre$gre_total_new
####### ####### ####### ####### ####### #######
####### ####### ####### GRE 对于录取率的影响 × 学校排名 (2)
####### ####### ####### ####### ####### #######
####### ####### ####### GRE verbal 对于录取率的影响  (3)
####### ####### ####### ####### ####### #######
####### ####### ####### GRE verbal 对于录取率的影响 × 学校排名 (4)
################################################
###                  TOEFL                 ###
################################################
descriptive$toefl <- as.numeric(descriptive$toefl) #将托福成绩信息变为数值型
summary(descriptive)
################################################
###                  专业                   ###
################################################
####### ####### ####### 预处理
# 原始专业统一格式
descriptive$major_before[descriptive$major_before %in% c("统计","统计学","Stat","stat","Biostat")] <- "Stat/Biostat"
descriptive$major_before[descriptive$major_before %in% c("软件工程","se","Software Engineering")] <- "SE"
descriptive$major_before[descriptive$major_before %in% c("cs", "计算机科学")] <- "CS"
descriptive$major_before[descriptive$major_before %in% c("材料","material","MSE")] <- "Material"
descriptive$major_before[descriptive$major_before %in% c("通信工程","信息工程","电子信息工程","ee")] <- "EE"
descriptive$major_before[descriptive$major_before %in% c("Automation","自动化","工业工程","IE")] <- "IEOR"
descriptive$major_before[descriptive$major_before %in% c("金融数学","金融","金融工程","MFE","Fin","FinMath")] <- "MFE/Fin/FinMath"
descriptive$major_before[descriptive$major_before %in% c("机械","机械工程","me")] <- "ME"
# 出现最多的10大专业
top10major <- names(sort(table(descriptive$major_apply),
decreasing = T)[c(1:7,9:11)])
descriptive$major_apply_new <- ifelse(descriptive$major_apply %in% top10major,descriptive$major_apply,"Others")
################################################
###                   GPA                   ###
################################################
descriptive$Standardgap = (descriptive$gpa/descriptive$gpa_measure)*4
gpa_offertype <- descriptive[descriptive$gpa_measure %in% c(4,100),c("Standardgap","offertype","CollegeRank")]
gpa_offertype$Standardgap[gpa_offertype$Standardgap<2] <- NA
gpa_offertype$offertype = factor(gpa_offertype$offertype,levels = c("Admitted", "Rejected"),
labels = c("录取","被拒"))
gpa_offertype <- na.omit(gpa_offertype)
gpa_offertype$CollegeRank <- ifelse(gpa_offertype$CollegeRank=="Others","Others","Top50名校")
gpa_offertype$CollegeRank <- factor(gpa_offertype$CollegeRank ,levels = c("Top50名校","Others"))
## 绘图
(boxplot4 <- ggplot(gpa_offertype, aes(x = factor(CollegeRank), y = Standardgap, fill = factor(offertype))) +
geom_boxplot(show.legend = T,varwidth = T, alpha = I(0.5)) +
scale_fill_manual("申请结果", values = c("dodgerblue","orange")) +
scale_y_continuous(limits = c(2,4),breaks = seq(2,4,by = 0.2))+
labs(x = "申请学校的世界排名", y = "GPA", title = "成绩与申请结果") +
plot_theme)
################################################
###                 其他信息                 ###
################################################
descriptive$first <- abs(descriptive$first)
descriptive$sci <- abs(descriptive$sci)
################################################
##########            end            ###########
################################################
descriptive <- descriptive[,c("toefl","gre_total_new","season","offertype","type","cross","rl","intern"
,"research","paper","first","sci","exchange","major_apply_new","Before_CollegeRank"
,"Standardgap","CollegeRank","major_apply","Districts","Top100_college_apply",
"College_apply_new", "CollegeRankTop50","index_origin")]
descriptive <- na.omit(descriptive)
dim(descriptive)
# 处理成绩变量
descriptive$gre_total_dis <- cut(descriptive$gre_total_new, breaks = c(0,319,322,325,Inf),
labels = c("<=319","319~322","322~325",">325"))
descriptive$toefl_dis <- cut(descriptive$toefl, breaks = c(0,98,102,106,Inf),
labels = c("<=98","98~102","102~106",">106"))
descriptive$gpa_dis <- cut(descriptive$Standardgap, breaks = c(0,3.4,3.55,3.7,Inf),
labels = c("<=3.4","3.4~3.55","3.55~3.7",">3.7"))
descriptive$major_apply_new <- relevel(as.factor(descriptive$major_apply_new),ref = "Others")
summary(descriptive)
dim(descriptive)
##### 读入数据& 预处理部分（邓）
library(reshape2)  #加载调整数据集组织形式所需使用的R包
library(ggplot2)   #加载描述统计所需R包
library(easyGgplot2) #加载描述统计所需R包
rm(list = ls()) #清理原始残留变量
setwd("/Users/mac/Desktop/狗熊会/留学数据/data")
descriptive <- read.csv("Data_Cleaning2.csv",
header = T, stringsAsFactors = F) #读取原始数据
summary(descriptive)
descriptive <- descriptive[order(descriptive$index_origin),]
#descriptive <- na.omit(descriptive)
plot_theme <- theme(panel.background = element_rect(fill = rgb(236, 241, 249, maxColorValue = 255)),
plot.background = element_rect(rgb(236, 241, 249, maxColorValue = 255)),
axis.text = element_text(size = 12,family = "Hei"),
axis.text.x = element_text(size = 12, family = "Hei", face = "bold") ,
axis.text.y = element_text(size = 12, family = "Hei", face = "bold") ,
axis.ticks = element_line(color = rgb(236, 241, 249, maxColorValue = 255)),
axis.title = element_text(size = 13, family = "Hei"),
panel.grid.major = element_line(size = 1),
panel.grid.minor = element_line(color = rgb(236, 241, 249, maxColorValue = 255)),
plot.title = element_text(family = "Hei", face = "bold", size = 14),
legend.title = element_text(family = "Hei", face = "bold",size = 12),
legend.text = element_text(family = "Hei",size = 11))
plot_theme_pie <- theme(panel.background = element_rect(fill = rgb(236, 241, 249, maxColorValue = 255)),
plot.background = element_rect(rgb(236, 241, 249, maxColorValue = 255)),
axis.text = element_text(color = rgb(236, 241, 249, maxColorValue = 255)),
panel.grid.major = element_line(color = rgb(236, 241, 249, maxColorValue = 255)),
panel.grid.minor = element_line(color = rgb(236, 241, 249, maxColorValue = 255)),
plot.title = element_text(family = "Hei", face = "bold", size = 14),
legend.title = element_text(family = "Hei", face = "bold",size = 12),
legend.text = element_text(family = "Hei",size = 11))
summary(descriptive)
unique(descriptive$offertype) #检查录取类型
## 调整命名
descriptive$offertype[descriptive$offertype %in% c("AD小奖", "Offer", "AD无奖")] <- "Admitted"
descriptive$offertype[descriptive$offertype == "Rej"] <- "Rejected"
descriptive <- descriptive[-which(descriptive$offertype == ""),]
## 作图准备工作
plot_colors <- c(rgb(6, 102, 177, maxColorValue = 255),
rgb(237, 27, 58, maxColorValue = 255),
rgb(250, 190, 175, maxColorValue = 255))
(piechart1 <- ggplot(descriptive, aes(x = factor(1), fill = factor(descriptive$offertype))) +
geom_bar(position = "fill", width = 1,alpha = 0.7) +
scale_fill_manual("申请结果", values = plot_colors) +
coord_polar(theta = "y") +
labs(x = "", y = "", title = "\n录取类型")+
plot_theme_pie)
## 调整录取类型——删掉WaitingList
descriptive <- descriptive[-which(descriptive$offertype == "WaitingList"),]
unique(descriptive$type) #检查录取类型
## 调整命名
descriptive$type[descriptive$type == "混合"] <- "mixed"
## 作图准备工作
Ttype <- factor(descriptive$type,levels = c("mixed", "MS", "PhD"), labels = c("混合","硕士","博士"))
(piechart2 <- ggplot(descriptive, aes(x = factor(1), fill = factor(Ttype))) +
geom_bar(position = "fill", width = 1, alpha = 0.7) +
scale_fill_manual("申请学位类型", values = plot_colors[c(3,1,2)]) +
coord_polar(theta = "y") +
labs(x = "", y = "", title = "\n申请学位类型") +
plot_theme_pie)
####### ####### ####### 申请学校预处理（1）
####### ####### ####### 统一申请学校姓名得到college_apply_new
descriptive$college_apply[descriptive$college_apply %in% c("Texas A","M University")] <- "Texas A&M University"
descriptive$college_apply[descriptive$college_apply %in% c("Washington University in St"," Louis")] <- "Washington University in St. Louis"
# 找出常见缩写形式
SuoXie <- read.table("常见美国大学缩写2.txt", header = T)
college_apply_new <- NULL
for(i in 1:dim(descriptive)[1]){
if(tolower(descriptive$college_apply[i]) %in% tolower(SuoXie$ysuoxie)){
college_apply_new[i] <- as.character(SuoXie$yquancheng[tolower(SuoXie$ysuoxie) %in% tolower(descriptive$college_apply[i])])
}
else college_apply_new[i] <- descriptive$college_apply[i]
}
# 统一申请学校姓名得到college_apply_new
descriptive$College_apply_new <- college_apply_new
####### ####### ####### ####### ####### #######
####### ####### ####### 10大热门学校
# 找出10大热门学校
top10_college_apply <- names(sort(table(descriptive$College_apply_new),
decreasing = T)[c(1:10)])
# 统计热门学校录取情况
descriptive_top10 <- descriptive[descriptive$College_apply_new %in% top10_college_apply,]
Top10_college_apply <- as.data.frame(table(descriptive_top10$College_apply_new,descriptive_top10$offertype))
colnames(Top10_college_apply) <- c("college","申请结果","number")
Top10_college_apply$college <- factor(Top10_college_apply$college,
levels = top10_college_apply,
labels = c("CMU","UC","USC","Columbia","UPenn"
,"UIUC","NEU","UMich","Cornell","TAMU"))
(barplot3 <- ggplot(Top10_college_apply, aes(x = college, y = number, fill = 申请结果)) +
geom_bar(show.legend = T, stat = 'identity',
alpha = 0.7, position = 'stack') +
labs(x = "", y = "\n申请人数", title = "\nTOP10 热门学校申请人数") +
plot_theme)
# 计算录取率
Top10_college_apply$number[1:10]/(Top10_college_apply$number[1:10]+Top10_college_apply$number[11:20])
####### ####### ####### 申请学校预处理（2）
####### ####### ####### 主要学校的录取率
# 找到 top100 热门学校（出现频率最小==11）
top100_college_apply <- college_apply_new
Top100FreqUniv <- names(sort(table(top100_college_apply),decreasing = T)[1:100])
top100_college_apply[!top100_college_apply %in% Top100FreqUniv] <- NA
descriptive$Top100_college_apply <- top100_college_apply
# 计算top100 热门学校录取率 admittedpct_top100college
ifadmitted = ifelse(descriptive$offertype == "Admitted",1,0)
admittedPct = aggregate(ifadmitted,list(descriptive$Top100_college_apply),
function(x){mean(x, na.rm = T)} )
colnames(admittedPct) = c("Top100_college_apply","admittedpct")
admittedpct_top100college <- merge(descriptive,admittedPct,by = "Top100_college_apply",all.x = T)$admittedpct
# top100 热门学校录取率 直方图
ggplot(admittedPct, aes(admittedpct)) +
geom_histogram(bins =15, fill = "dodgerblue",alpha = 0.7) +
labs(y ="学校数量", x = "录取率", title = "申请人数Top100大学的录取率分布直方图") +
plot_theme
# 找到极大极小值
admittedPct[admittedPct$admittedpct<0.3,];admittedPct[admittedPct$admittedpct>0.98,]
####### ####### ####### 申请学校预处理（3）
####### ####### ####### 申请学校排名
# TOP50的学校（除去国内清华北大复旦）
universities <- read.table("/Users/mac/Desktop/狗熊会/留学数据/data/大学排名的副本.txt", header = F, sep="\n")$V1
universities1 <- paste0("", gsub("，", "|", universities), "")
top10university <- NULL;top10_50university <- NULL;top50university <- NULL
top51_100university <- NULL;top101_200university <- NULL;top100university <- NULL
College_apply_new_ = gsub(pattern = "\\(|\\{|\\}", replacement = " ", x = descriptive$college_apply)
# 匹配学校世界排名
for(i in 1:length(College_apply_new_)){
top10university[i] = grepl(College_apply_new_[i],
paste0(universities1[1:10],collapse = "|"))
top10_50university[i] = grepl(College_apply_new_[i],
paste0(universities1[11:47],collapse = "|"))
top51_100university[i] = grepl(College_apply_new_[i],
paste0(universities1[48:61],collapse = "|"))
top101_200university[i] = grepl(College_apply_new_[i],
paste0(universities1[62:76],collapse = "|"))
}
table(top10university)
# 划分为三挡
collegerank <- rep("Others",dim(descriptive)[1])
collegerank[top10university] <- "Top10"
collegerank[top10_50university] <- "Top10_50"
collegerank[top51_100university] <- "Top51_100"
collegerank[top101_200university] <- "Top101_200"
descriptive$CollegeRank <- collegerank
table(descriptive$CollegeRank)   # 申请top 10 学校的人太少了。。。
# 划分为两档
descriptive$CollegeRankTop50 <- as.factor(ifelse(descriptive$CollegeRank=="Others","Others","Top200"))
####### ####### ####### 申请学校预处理（4）
####### ####### ####### 申请学校地区
Universities <- function(path){   # 学校名单——地区
# 读取数据
fileNames <- dir(path) # 获取文件名
filePath <- sapply(fileNames, function(x){paste(path,x,sep='/')}) # 生成读取文件路径
data <- lapply(filePath, function(x){read.csv(x,header = F)}) # 结果为list
# 转化为vector
universities <- as.vector(unlist(data[[1]]))
for(i in 2:length(data)){
universities <- c(universities,as.vector(unlist(data[[i]])))
}
# 删去括号
Univ <- NULL
for(i in 1:length(universities)){
x <- as.character(universities[i])
Univ[i] <- strsplit(x, " \\(")[[1]][1]
}
# 匹配缩写
SuoXie <- read.table("常见美国大学缩写2.txt", header = T)
DstSuoxie <- as.character(SuoXie$ysuoxie[SuoXie$yquancheng %in% Univ])
# 返回数据
return(c(Univ,DstSuoxie))
}
setwd("/Users/mac/Desktop/狗熊会/留学数据/data/所有大学&地区")
path <- paste0(getwd(),"/East Coast")
EastCoast <- Universities(paste0(getwd(),"/East Coast"))
GulfCoast <- Universities(paste0(getwd(),"/Gulf Coast"))
MidWest <- Universities(paste0(getwd(),"/Mid-west"))
RockyMountains <- Universities(paste0(getwd(),"/Rocky Mountains"))
WestCoast <- Universities(paste0(getwd(),"/West Coast"))
######### 对原数据进行匹配
temp <- rep(NA,dim(descriptive)[1])
temp[tolower(descriptive$college_apply) %in% tolower(EastCoast)] <- "EastCoast"
temp[tolower(descriptive$college_apply) %in% tolower(GulfCoast)] <- "GulfCoast"
temp[tolower(descriptive$college_apply) %in% tolower(MidWest)] <- "MidWest"
temp[tolower(descriptive$college_apply) %in% tolower(RockyMountains)] <- "RockyMountains"
temp[tolower(descriptive$college_apply) %in% tolower(WestCoast)] <- "WestCoast, AK, HI"
table(temp)
descriptive$Districts <- temp
################################################
###                   原始学校               ###
################################################
####### ####### ####### 原始学排名预处理（1）
# 读入学校排名数据
universities <- read.table("/Users/mac/Desktop/狗熊会/留学数据/data/QS大学排名前500（中国）.txt", header = F, sep="\n")$V1
universities1 <- paste0("", gsub(" ", "|", universities), "")
# 匹配学校
top100university <- NULL;top100_500university <- NULL;top500university <- NULL
descriptive$college_before <- gsub(pattern = "\\(|\\{|\\}|\\*", replacement = "", x = descriptive$college_before)
descriptive$college_before <- gsub(pattern = " ", replacement = "", x = descriptive$college_before)
descriptive$college_before[descriptive$college_before==""] <- NA
for(i in 1:length(descriptive$college_before)){
top100university[i] = grepl(descriptive$college_before[i],
paste0(universities1[1:11],collapse = "|"))
top100_500university[i] = grepl(descriptive$college_before[i],
paste0(universities1[12:27],collapse = "|"))
}
# 得到原始学校排名变量
descriptive$Before_CollegeRank <- cut(top100university*2 + top100_500university,
breaks = c(-0.1,0.9,1.9,3), labels = c("Others","Top100~500","Top100"))
# 计算录取率
ifadmitted = ifelse(descriptive$offertype == "Admitted",1,0)
admittedPct = aggregate(ifadmitted,list(descriptive$Before_CollegeRank,descriptive$CollegeRank),mean)
admittedPct$Group.1 <- factor(admittedPct$Group.1,levels = c("Top100","Top100~500","Others"))
# 画图
(barplot6 <- ggplot(admittedPct, aes(x = Group.2, y = x, fill = Group.1)) +
geom_bar(show.legend = T, stat = 'identity',
alpha = 0.7, position = 'dodge') +
labs(x = "申请学校-世界排名", y = "录取率", title = "学校排名与录取率") +
#scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual("原始学校-世界排名", values = rep(c("dodgerblue","cyan3","#d3d3d3"),3))+
geom_text(label = paste(round(admittedPct$x, 2)*100, "%", sep=''),
colour = "black", position = position_dodge(1),size = 4, vjust = -0.8)  +
geom_hline(aes(yintercept = mean(ifadmitted)),col = "orange",lwd = 0.6)+
geom_text(label = paste(round(mean(ifadmitted), 2)*100, "%", sep=''),
colour = "orange",x = 3.5, y = 0.65, size = 5.8, vjust =  - 0.5)  +
plot_theme)
summary(descriptive)
################################################
###                  TOEFL                 ###
################################################
descriptive$toefl <- as.numeric(descriptive$toefl) #将托福成绩信息变为数值型
summary(descriptive)
################################################
###                  专业                   ###
################################################
####### ####### ####### 预处理
# 原始专业统一格式
descriptive$major_before[descriptive$major_before %in% c("统计","统计学","Stat","stat","Biostat")] <- "Stat/Biostat"
descriptive$major_before[descriptive$major_before %in% c("软件工程","se","Software Engineering")] <- "SE"
descriptive$major_before[descriptive$major_before %in% c("cs", "计算机科学")] <- "CS"
descriptive$major_before[descriptive$major_before %in% c("材料","material","MSE")] <- "Material"
descriptive$major_before[descriptive$major_before %in% c("通信工程","信息工程","电子信息工程","ee")] <- "EE"
descriptive$major_before[descriptive$major_before %in% c("Automation","自动化","工业工程","IE")] <- "IEOR"
descriptive$major_before[descriptive$major_before %in% c("金融数学","金融","金融工程","MFE","Fin","FinMath")] <- "MFE/Fin/FinMath"
descriptive$major_before[descriptive$major_before %in% c("机械","机械工程","me")] <- "ME"
# 出现最多的10大专业
top10major <- names(sort(table(descriptive$major_apply),
decreasing = T)[c(1:7,9:11)])
descriptive$major_apply_new <- ifelse(descriptive$major_apply %in% top10major,descriptive$major_apply,"Others")
################################################
###                   GPA                   ###
################################################
descriptive$Standardgap = (descriptive$gpa/descriptive$gpa_measure)*4
gpa_offertype <- descriptive[descriptive$gpa_measure %in% c(4,100),c("Standardgap","offertype","CollegeRank")]
gpa_offertype$Standardgap[gpa_offertype$Standardgap<2] <- NA
gpa_offertype$offertype = factor(gpa_offertype$offertype,levels = c("Admitted", "Rejected"),
labels = c("录取","被拒"))
gpa_offertype <- na.omit(gpa_offertype)
gpa_offertype$CollegeRank <- ifelse(gpa_offertype$CollegeRank=="Others","Others","Top50名校")
gpa_offertype$CollegeRank <- factor(gpa_offertype$CollegeRank ,levels = c("Top50名校","Others"))
## 绘图
(boxplot4 <- ggplot(gpa_offertype, aes(x = factor(CollegeRank), y = Standardgap, fill = factor(offertype))) +
geom_boxplot(show.legend = T,varwidth = T, alpha = I(0.5)) +
scale_fill_manual("申请结果", values = c("dodgerblue","orange")) +
scale_y_continuous(limits = c(2,4),breaks = seq(2,4,by = 0.2))+
labs(x = "申请学校的世界排名", y = "GPA", title = "成绩与申请结果") +
plot_theme)
################################################
###                 其他信息                 ###
################################################
descriptive$first <- abs(descriptive$first)
descriptive$sci <- abs(descriptive$sci)
################################################
##########            end            ###########
################################################
descriptive <- descriptive[,c("toefl","gre_total_new","season","offertype","type","cross","rl","intern"
,"research","paper","first","sci","exchange","major_apply_new","Before_CollegeRank"
,"Standardgap","CollegeRank","major_apply","Districts","Top100_college_apply",
"College_apply_new", "CollegeRankTop50","index_origin")]
summary(descriptive)
