college_low <- tolower(descriptive$college_apply)         # 不考虑大小写差异
suoxie_low <- tolower(SuoXie$ysuoxie)
for(i in 1:dim(descriptive)[1]){                          # 统一全称和缩写
if(college_low[i] %in% suoxie_low){
college_apply_new[i] <- as.character(SuoXie$yquancheng[suoxie_low %in% college_low[i]])
}
else college_apply_new[i] <- descriptive$college_apply[i]
}
college_apply_new
college_apply_new
descriptive$College_apply_new <- college_apply_new        # 统一学校名称后的新变量
top10_college_apply <- names(sort(table(descriptive$College_apply_new),
decreasing = T)[c(1:10)])
top10_college_apply
# 统计热门学校录取情况
descriptive_top10 <- descriptive[descriptive$College_apply_new %in% top10_college_apply,]
Top10_college_apply <- as.data.frame(table(descriptive_top10$College_apply_new,descriptive_top10$offertype))
colnames(Top10_college_apply) <- c("college","申请结果","number")
Top10_college_apply$college <- factor(Top10_college_apply$college,
levels = top10_college_apply,
labels = c("CMU","UC","USC","Columbia","UPenn"
,"UIUC","NEU","UMich","Cornell","TAMU"))
(barplot3 <- ggplot(Top10_college_apply, aes(x = college, y = number, fill = 申请结果)) +
geom_bar(show.legend = T, stat = 'identity',
alpha = 0.7, position = 'stack') +
labs(x = "", y = "\n申请人数", title = "\nTOP10 热门学校申请人数") +
plot_theme)
# 计算录取率
Top10_college_apply$number[1:10]/(Top10_college_apply$number[1:10]+Top10_college_apply$number[11:20])
# 找出10大热门学校
top10_college_apply <- names(sort(table(descriptive$College_apply_new),
decreasing = T)[c(1:10)])
# 统计热门学校录取情况
descriptive_top10 <- descriptive[descriptive$College_apply_new %in% top10_college_apply,]
Top10_college_apply <- as.data.frame(table(descriptive_top10$College_apply_new,descriptive_top10$offertype))
colnames(Top10_college_apply) <- c("college","申请结果","number")
Top10_college_apply$college <- factor(Top10_college_apply$college,
levels = top10_college_apply,
labels = c("CMU","UC","USC","Columbia","UPenn"
,"UIUC","NEU","UMich","Cornell","TAMU"))
(barplot3 <- ggplot(Top10_college_apply, aes(x = college, y = number, fill = 申请结果)) +
geom_bar(show.legend = T, stat = 'identity',
alpha = 0.7, position = 'stack') +
labs(x = "", y = "\n申请人数", title = "\nTOP10 热门学校申请人数") +
plot_theme)
top100_college_apply <- college_apply_new
Top100FreqUniv <- names(sort(table(top100_college_apply),decreasing = T)[1:100])
sort(table(top100_college_apply),decreasing = T)[1:100]
Top100FreqUniv
top100_college_apply[!top100_college_apply %in% Top100FreqUniv] <- NA
Top100FreqUniv
top10_college_apply
descriptive_top10 <- descriptive[descriptive$College_apply_new %in% top10_college_apply,]
top10_college_apply <- names(sort(table(descriptive$College_apply_new),
decreasing = T)[c(1:10)])
# 统计热门学校录取情况
descriptive_top10 <- descriptive[descriptive$College_apply_new %in% top10_college_apply,]
Top10_college_apply <- as.data.frame(table(descriptive_top10$College_apply_new,descriptive_top10$offertype))
descriptive_top10
# 找出10大热门学校
top10_college_apply <- names(sort(table(descriptive$College_apply_new),
decreasing = T)[c(1:10)])
# 统计热门学校录取情况
descriptive_top10 <- descriptive[descriptive$College_apply_new %in% top10_college_apply,]
Top10_college_apply <- as.data.frame(table(descriptive_top10$College_apply_new,descriptive_top10$offertype))
colnames(Top10_college_apply) <- c("college","申请结果","number")
# 学校名称使用缩写，以便图形展示
Top10_college_apply$college <- factor(Top10_college_apply$college,
levels = top10_college_apply,
labels = c("CMU","UC","USC","Columbia","UPenn"
,"UIUC","NEU","UMich","Cornell","TAMU"))
(barplot3 <- ggplot(Top10_college_apply, aes(x = college, y = number, fill = 申请结果)) +
geom_bar(show.legend = T, stat = 'identity',
alpha = 0.7, position = 'stack') +
labs(x = "", y = "\n申请人数", title = "\nTOP10 热门学校申请人数") +
plot_theme)
Top100FreqUniv
## 排序并提取申请人数较多的百所学校
top100_college_apply <- college_apply_new
Top100FreqUniv <- names(sort(table(top100_college_apply), decreasing = T)[1:100])
## 计算热门学校录取率
top100_college_apply[!top100_college_apply %in% Top100FreqUniv] <- NA
descriptive$Top100_college_apply <- top100_college_apply          # 只保留百所热门学校
ifadmitted <- ifelse(descriptive$offertype == "Admitted",1,0)     # 录取记为1，被拒记为0
admittedPct <-  aggregate(ifadmitted,list(descriptive$Top100_college_apply),
function(x){mean(x, na.rm = T)} )         # 按学校分组计算录取率
colnames(admittedPct) <- c("Top100_college_apply","admittedpct")  # 修改列名
admittedpct_top100college <- merge(descriptive, admittedPct,      # 将学校录取率并入原数据
by = "Top100_college_apply", all.x = T)$admittedpct
## 热门学校录取率直方图
(histogram1 <- ggplot(admittedPct, aes(admittedpct)) +
geom_histogram(bins =15, fill = "dodgerblue", alpha = 0.7) +
labs(y ="学校数量", x = "录取率", title = "申请人数Top100大学的录取率分布直方图") +
plot_theme)
# 找到极大极小值
admittedPct[admittedPct$admittedpct<0.3,];admittedPct[admittedPct$admittedpct>0.98,]
max(admittedPct)
max(admittedPct$admittedpct)
admittedPct[admittedPct$admittedpct<0.3,];admittedPct[admittedPct$admittedpct==1,]
admittedPct
admittedpct
admittedPct
range(admittedPct)
range(admittedPct,na.rm = F)
range(admittedPct,na.rm = T)
?range
range(admittedPct$admittedpct,na.rm = T)
Min <- range(admittedPct$admittedpct, na.rm = T)
Max <- range(admittedPct$admittedpct, na.rm = T)[,2]
Min <- range(admittedPct$admittedpct, na.rm = T)[,1]
Max <- range(admittedPct$admittedpct, na.rm = T)[2]
Min
Max
Min <- range(admittedPct$admittedpct, na.rm = T)[1]
Min
Min
Range <- range(admittedPct$admittedpct, na.rm = T)
Range
admittedPct[admittedPct$admittedpct==Range[1],]
?max
pmax(admittedPct$admittedpct)
admittedPct[admittedPct$admittedpct==Range[1],]
admittedPct[admittedPct$admittedpct==Range[2],]
Range <- range(admittedPct$admittedpct, na.rm = T)
Minpct <- admittedPct[admittedPct$admittedpct==Range[1],]
Macpct <- admittedPct[admittedPct$admittedpct==Range[2],]
Macpct
Minpct
Macpct
Minpct
Macpct
admittedPct[admittedPct$admittedpct==Range[1],1]
####### ####### ####### 申请学校预处理（3）
####### ####### ####### 申请学校排名
# TOP50的学校（除去国内清华北大复旦）
universities <- read.table("/Users/mac/Desktop/狗熊会/留学数据/data/大学排名的副本.txt", header = F, sep="\n")$V1
universities1 <- paste0("", gsub("，", "|", universities), "")
top10university <- NULL;top10_50university <- NULL;top50university <- NULL
top51_100university <- NULL;top101_200university <- NULL;top100university <- NULL
College_apply_new_ = gsub(pattern = "\\(|\\{|\\}", replacement = " ", x = descriptive$college_apply)
# 匹配学校世界排名
for(i in 1:length(College_apply_new_)){
top10university[i] = grepl(College_apply_new_[i],
paste0(universities1[1:10],collapse = "|"))
top10_50university[i] = grepl(College_apply_new_[i],
paste0(universities1[11:47],collapse = "|"))
top51_100university[i] = grepl(College_apply_new_[i],
paste0(universities1[48:61],collapse = "|"))
top101_200university[i] = grepl(College_apply_new_[i],
paste0(universities1[62:76],collapse = "|"))
}
table(top10university)
# 划分为三挡
collegerank <- rep("Others",dim(descriptive)[1])
collegerank[top10university] <- "Top10"
collegerank[top10_50university] <- "Top10_50"
collegerank[top51_100university] <- "Top51_100"
collegerank[top101_200university] <- "Top101_200"
descriptive$CollegeRank <- collegerank
table(descriptive$CollegeRank)   # 申请top 10 学校的人太少了。。。
# 划分为两档
descriptive$CollegeRankTop50 <- as.factor(ifelse(descriptive$CollegeRank=="Others","Others","Top200"))
table(descriptive$CollegeRank)   # 申请top 10 学校的人太少了。。。
universities <- read.table("/Users/mac/Desktop/狗熊会/留学数据/data/大学排名2018.txt", header = F, sep="\n")$V1
universities1 <- paste0("", gsub("，", "|", universities), "")
top10university <- NULL;top10_50university <- NULL;top50university <- NULL
top51_100university <- NULL;top101_200university <- NULL;top100university <- NULL
College_apply_new_ = gsub(pattern = "\\(|\\{|\\}", replacement = " ", x = descriptive$college_apply)
# 匹配学校世界排名
for(i in 1:length(College_apply_new_)){
top10university[i] = grepl(College_apply_new_[i],
paste0(universities1[1:10],collapse = "|"))
top10_50university[i] = grepl(College_apply_new_[i],
paste0(universities1[11:47],collapse = "|"))
top51_100university[i] = grepl(College_apply_new_[i],
paste0(universities1[48:61],collapse = "|"))
top101_200university[i] = grepl(College_apply_new_[i],
paste0(universities1[62:76],collapse = "|"))
}
table(top10university)
# 划分为三挡
collegerank <- rep("Others",dim(descriptive)[1])
collegerank[top10university] <- "Top10"
collegerank[top10_50university] <- "Top10_50"
collegerank[top51_100university] <- "Top51_100"
collegerank[top101_200university] <- "Top101_200"
descriptive$CollegeRank <- collegerank
table(descriptive$CollegeRank)   # 申请top 10 学校的人太少了。。。
# 划分为两档
descriptive$CollegeRankTop50 <- as.factor(ifelse(descriptive$CollegeRank=="Others","Others","Top200"))
##### 读入数据& 预处理部分（邓）
library(reshape2)  #加载调整数据集组织形式所需使用的R包
library(ggplot2)   #加载描述统计所需R包
library(easyGgplot2) #加载描述统计所需R包
rm(list = ls()) #清理原始残留变量
setwd("/Users/mac/Desktop/狗熊会/留学数据/data")
descriptive <- read.csv("Data_Cleaning2.csv",
header = T, stringsAsFactors = F) #读取原始数据
summary(descriptive)
descriptive <- descriptive[order(descriptive$index_origin),]
#descriptive <- na.omit(descriptive)
plot_theme <- theme(panel.background = element_rect(fill = rgb(236, 241, 249, maxColorValue = 255)),
plot.background = element_rect(rgb(236, 241, 249, maxColorValue = 255)),
axis.text = element_text(size = 12,family = "Hei"),
axis.text.x = element_text(size = 12, family = "Hei", face = "bold") ,
axis.text.y = element_text(size = 12, family = "Hei", face = "bold") ,
axis.ticks = element_line(color = rgb(236, 241, 249, maxColorValue = 255)),
axis.title = element_text(size = 13, family = "Hei"),
panel.grid.major = element_line(size = 1),
panel.grid.minor = element_line(color = rgb(236, 241, 249, maxColorValue = 255)),
plot.title = element_text(family = "Hei", face = "bold", size = 14),
legend.title = element_text(family = "Hei", face = "bold",size = 12),
legend.text = element_text(family = "Hei",size = 11))
plot_theme_pie <- theme(panel.background = element_rect(fill = rgb(236, 241, 249, maxColorValue = 255)),
plot.background = element_rect(rgb(236, 241, 249, maxColorValue = 255)),
axis.text = element_text(color = rgb(236, 241, 249, maxColorValue = 255)),
panel.grid.major = element_line(color = rgb(236, 241, 249, maxColorValue = 255)),
panel.grid.minor = element_line(color = rgb(236, 241, 249, maxColorValue = 255)),
plot.title = element_text(family = "Hei", face = "bold", size = 14),
legend.title = element_text(family = "Hei", face = "bold",size = 12),
legend.text = element_text(family = "Hei",size = 11))
################################################
###                录取与拒绝                 ##
################################################
unique(descriptive$offertype) #检查录取类型
## 调整命名
descriptive$offertype[descriptive$offertype %in% c("AD小奖", "Offer", "AD无奖")] <- "Admitted"
descriptive$offertype[descriptive$offertype == "Rej"] <- "Rejected"
descriptive <- descriptive[-which(descriptive$offertype == ""),]
## 作图准备工作
plot_colors <- c(rgb(6, 102, 177, maxColorValue = 255),
rgb(237, 27, 58, maxColorValue = 255),
rgb(250, 190, 175, maxColorValue = 255))
(piechart1 <- ggplot(descriptive, aes(x = factor(1), fill = factor(descriptive$offertype))) +
geom_bar(position = "fill", width = 1,alpha = 0.7) +
scale_fill_manual("申请结果", values = plot_colors) +
coord_polar(theta = "y") +
labs(x = "", y = "", title = "\n录取类型")+
plot_theme_pie)
## 调整录取类型——删掉WaitingList
descriptive <- descriptive[-which(descriptive$offertype == "WaitingList"),]
################################################
###                博士or硕士                 ##
################################################
unique(descriptive$type) #检查录取类型
## 调整命名
descriptive$type[descriptive$type == "混合"] <- "mixed"
## 作图准备工作
Ttype <- factor(descriptive$type,levels = c("mixed", "MS", "PhD"), labels = c("混合","硕士","博士"))
(piechart2 <- ggplot(descriptive, aes(x = factor(1), fill = factor(Ttype))) +
geom_bar(position = "fill", width = 1, alpha = 0.7) +
scale_fill_manual("申请学位类型", values = plot_colors[c(3,1,2)]) +
coord_polar(theta = "y") +
labs(x = "", y = "", title = "\n申请学位类型") +
plot_theme_pie)
################################################
###                  申请学校                ###
################################################
####### ####### ####### 申请学校预处理（1）
####### ####### ####### 统一申请学校姓名得到college_apply_new
descriptive$college_apply[descriptive$college_apply %in% c("Texas A","M University")] <- "Texas A&M University"
descriptive$college_apply[descriptive$college_apply %in% c("Washington University in St"," Louis")] <- "Washington University in St. Louis"
# 找出常见缩写形式
SuoXie <- read.table("常见美国大学缩写2.txt", header = T)
college_apply_new <- NULL
for(i in 1:dim(descriptive)[1]){
if(tolower(descriptive$college_apply[i]) %in% tolower(SuoXie$ysuoxie)){
college_apply_new[i] <- as.character(SuoXie$yquancheng[tolower(SuoXie$ysuoxie) %in% tolower(descriptive$college_apply[i])])
}
else college_apply_new[i] <- descriptive$college_apply[i]
}
# 统一申请学校姓名得到college_apply_new
descriptive$College_apply_new <- college_apply_new
####### ####### ####### ####### ####### #######
####### ####### ####### 10大热门学校
# 找出10大热门学校
top10_college_apply <- names(sort(table(descriptive$College_apply_new),
decreasing = T)[c(1:10)])
# 统计热门学校录取情况
descriptive_top10 <- descriptive[descriptive$College_apply_new %in% top10_college_apply,]
Top10_college_apply <- as.data.frame(table(descriptive_top10$College_apply_new,descriptive_top10$offertype))
colnames(Top10_college_apply) <- c("college","申请结果","number")
Top10_college_apply$college <- factor(Top10_college_apply$college,
levels = top10_college_apply,
labels = c("CMU","UC","USC","Columbia","UPenn"
,"UIUC","NEU","UMich","Cornell","TAMU"))
(barplot3 <- ggplot(Top10_college_apply, aes(x = college, y = number, fill = 申请结果)) +
geom_bar(show.legend = T, stat = 'identity',
alpha = 0.7, position = 'stack') +
labs(x = "", y = "\n申请人数", title = "\nTOP10 热门学校申请人数") +
plot_theme)
# 计算录取率
Top10_college_apply$number[1:10]/(Top10_college_apply$number[1:10]+Top10_college_apply$number[11:20])
####### ####### ####### 申请学校预处理（2）
####### ####### ####### 主要学校的录取率
# 找到 top100 热门学校（出现频率最小==11）
top100_college_apply <- college_apply_new
Top100FreqUniv <- names(sort(table(top100_college_apply),decreasing = T)[1:100])
top100_college_apply[!top100_college_apply %in% Top100FreqUniv] <- NA
descriptive$Top100_college_apply <- top100_college_apply
# 计算top100 热门学校录取率 admittedpct_top100college
ifadmitted = ifelse(descriptive$offertype == "Admitted",1,0)
admittedPct = aggregate(ifadmitted,list(descriptive$Top100_college_apply),
function(x){mean(x, na.rm = T)} )
colnames(admittedPct) = c("Top100_college_apply","admittedpct")
admittedpct_top100college <- merge(descriptive,admittedPct,by = "Top100_college_apply",all.x = T)$admittedpct
# top100 热门学校录取率 直方图
ggplot(admittedPct, aes(admittedpct)) +
geom_histogram(bins =15, fill = "dodgerblue",alpha = 0.7) +
labs(y ="学校数量", x = "录取率", title = "申请人数Top100大学的录取率分布直方图") +
plot_theme
# 找到极大极小值
admittedPct[admittedPct$admittedpct<0.3,];admittedPct[admittedPct$admittedpct>0.98,]
####### ####### ####### 申请学校预处理（3）
####### ####### ####### 申请学校排名
# TOP50的学校（除去国内清华北大复旦）
universities <- read.table("/Users/mac/Desktop/狗熊会/留学数据/data/大学排名的副本.txt", header = F, sep="\n")$V1
universities1 <- paste0("", gsub("，", "|", universities), "")
top10university <- NULL;top10_50university <- NULL;top50university <- NULL
top51_100university <- NULL;top101_200university <- NULL;top100university <- NULL
College_apply_new_ = gsub(pattern = "\\(|\\{|\\}", replacement = " ", x = descriptive$college_apply)
# 匹配学校世界排名
for(i in 1:length(College_apply_new_)){
top10university[i] = grepl(College_apply_new_[i],
paste0(universities1[1:10],collapse = "|"))
top10_50university[i] = grepl(College_apply_new_[i],
paste0(universities1[11:47],collapse = "|"))
top51_100university[i] = grepl(College_apply_new_[i],
paste0(universities1[48:61],collapse = "|"))
top101_200university[i] = grepl(College_apply_new_[i],
paste0(universities1[62:76],collapse = "|"))
}
table(top10university)
# 划分为三挡
collegerank <- rep("Others",dim(descriptive)[1])
collegerank[top10university] <- "Top10"
collegerank[top10_50university] <- "Top10_50"
collegerank[top51_100university] <- "Top51_100"
collegerank[top101_200university] <- "Top101_200"
descriptive$CollegeRank <- collegerank
table(descriptive$CollegeRank)   # 申请top 10 学校的人太少了。。。
# 划分为两档
descriptive$CollegeRankTop50 <- as.factor(ifelse(descriptive$CollegeRank=="Others","Others","Top200"))
---
title: "读入&预处理&描述"
author: "布丁小分队"
date: "2018/9/10"
output: html_document
---
# 读入数据与准备工作
```{r}
## 清理原始残留变量
rm(list = ls())
## 加载包
library(reshape2)    # 加载调整数据集组织形式所需使用的R包
library(ggplot2)     # 加载描述统计所需R包
library(easyGgplot2) # 加载描述统计所需R包
## 设置路径并读入数据
setwd("/Users/mac/Desktop/狗熊会/留学数据/data")
descriptive <- read.csv("Data_Cleaning2.csv", header = T, stringsAsFactors = F) # 读取原始数据
## 查看数据概况
summary(descriptive)  # 查看数据概况
descriptive <- descriptive[order(descriptive$index_origin),]  # 将数据按照变量index_origin（原始编号）排序
## 设置ggplot2画图主题
######################HEI = """"""""    # 设置字体，mac下跳过此步
plot_theme <- theme(panel.background = element_rect(fill = rgb(236, 241, 249, maxColorValue = 255)),
plot.background = element_rect(rgb(236, 241, 249, maxColorValue = 255)),
axis.text = element_text(size = 12,family = "Hei"),
axis.text.x = element_text(size = 12, family = "Hei", face = "bold") ,
axis.text.y = element_text(size = 12, family = "Hei", face = "bold") ,
axis.ticks = element_line(color = rgb(236, 241, 249, maxColorValue = 255)),
axis.title = element_text(size = 13, family = "Hei"),
panel.grid.major = element_line(size = 1),
panel.grid.minor = element_line(color = rgb(236, 241, 249, maxColorValue = 255)),
plot.title = element_text(family = "Hei", face = "bold", size = 14),
legend.title = element_text(family = "Hei", face = "bold",size = 12),
legend.text = element_text(family = "Hei",size = 11))   # 其他图形绘制主题
```
# 描述统计
## 录取与拒绝
```{r}
unique(descriptive$offertype)  # 查看录取类型
## 调整命名
descriptive$offertype[descriptive$offertype %in% c("AD小奖", "Offer", "AD无奖")] <- "Admitted"    # 不考虑奖学金，均归入“Admitted“（录取）
descriptive$offertype[descriptive$offertype == "Rej"] <- "Rejected"
descriptive <- descriptive[ - which(descriptive$offertype == ""),]   # 删去缺失录取结果的样本
## 作图
plot_colors_pie <- c(rgb(6, 102, 177, maxColorValue = 255),     # 设置饼图颜色
rgb(237, 27, 58, maxColorValue = 255),
rgb(250, 190, 175, maxColorValue = 255))
plot_theme_pie <- theme(panel.background = element_rect(fill = rgb(236, 241, 249, maxColorValue = 255)),
plot.background = element_rect(rgb(236, 241, 249, maxColorValue = 255)),
axis.text = element_text(color = rgb(236, 241, 249, maxColorValue = 255)),
panel.grid.major = element_line(color = rgb(236, 241, 249, maxColorValue = 255)),
panel.grid.minor = element_line(color = rgb(236, 241, 249, maxColorValue = 255)),
plot.title = element_text(family = "Hei", face = "bold", size = 14),
legend.title = element_text(family = "Hei", face = "bold",size = 12),
legend.text = element_text(family = "Hei",size = 11))   # 饼图绘制主题
(piechart1 <- ggplot(descriptive, aes(x = factor(1), fill = factor(descriptive$offertype))) +
geom_bar(position = "fill", width = 1,alpha = 0.7) +
scale_fill_manual("申请结果", values = plot_colors_pie) +
coord_polar(theta = "y") +
labs(x = "", y = "", title = "\n录取类型")+
plot_theme_pie)
## 为简化后续分信息，删掉录取结果为WaitingList的样本
descriptive <- descriptive[-which(descriptive$offertype == "WaitingList"),]
```
## 博士or硕士
```{r}
unique(descriptive$type)   # 查看录取类型
## 作图
Ttype <- factor(descriptive$type,levels = c("混合", "MS", "PhD"), labels = c("混合","硕士","博士"))  # 调整命名为中文
(piechart2 <- ggplot(descriptive, aes(x = factor(1), fill = factor(Ttype))) +
geom_bar(position = "fill", width = 1, alpha = 0.7) +
scale_fill_manual("申请学位类型", values = plot_colors_pie[c(3,1,2)]) +
coord_polar(theta = "y") +
labs(x = "", y = "", title = "\n申请学位类型") +
plot_theme_pie)
```
## 申请学校
### 整理申请学校名称
```{r,warning = FALSE}
## 修正数据
descriptive$college_apply[descriptive$college_apply %in% c("Texas A", "M University")] <- "Texas A&M University"
descriptive$college_apply[descriptive$college_apply %in% c("Washington University in St", " Louis")] <- "Washington University in St. Louis"
## 统一学校名称
SuoXie <- read.table("/Users/mac/Desktop/狗熊会/留学数据/data/美国大学缩写汇总.txt", header = T)  # 读入美国大学缩写汇总
college_apply_new <- NULL                                 # 设置初始值
college_low <- tolower(descriptive$college_apply)         # 不考虑大小写差异
suoxie_low <- tolower(SuoXie$ysuoxie)
for(i in 1:dim(descriptive)[1]){                          # 统一全称和缩写
if(college_low[i] %in% suoxie_low){
college_apply_new[i] <- as.character(SuoXie$yquancheng[suoxie_low %in% college_low[i]])
}
else college_apply_new[i] <- descriptive$college_apply[i]
}
descriptive$College_apply_new <- college_apply_new        # 统一学校名称后的新变量
```
### 热门申请学校
```{r}
# 找出10大热门学校
top10_college_apply <- names(sort(table(descriptive$College_apply_new),
decreasing = T)[c(1:10)])
# 统计热门学校录取情况
descriptive_top10 <- descriptive[descriptive$College_apply_new %in% top10_college_apply, ]
Top10_college_apply <- as.data.frame(table(descriptive_top10$College_apply_new,
descriptive_top10$offertype))
colnames(Top10_college_apply) <- c("college", "申请结果", "number")   # 修改列名
# 缩写学校名称，以便图形展示
Top10_college_apply$college <- factor(Top10_college_apply$college,
levels = top10_college_apply,
labels = c("CMU", "UC", "USC", "Columbia", "UPenn"
, "UIUC", "NEU", "UMich", "Cornell", "TAMU"))
(barplot1 <- ggplot(Top10_college_apply, aes(x = college, y = number, fill = 申请结果)) +
geom_bar(show.legend = T, stat = 'identity',
alpha = 0.7, position = 'stack') +
labs(x = "", y = "\n申请人数", title = "\nTOP10 热门学校申请人数") +
plot_theme)
```
### 学校录取率
```{r}
## 排序并提取申请人数较多的百所学校
top100_college_apply <- college_apply_new
Top100FreqUniv <- names(sort(table(top100_college_apply), decreasing = T)[1:100])
## 计算热门学校录取率
top100_college_apply[!top100_college_apply %in% Top100FreqUniv] <- NA
descriptive$Top100_college_apply <- top100_college_apply          # 只保留百所热门学校
ifadmitted <- ifelse(descriptive$offertype == "Admitted",1,0)     # 录取记为1，被拒记为0
admittedPct <-  aggregate(ifadmitted,list(descriptive$Top100_college_apply),
function(x){mean(x, na.rm = T)} )         # 按学校分组计算录取率
colnames(admittedPct) <- c("Top100_college_apply","admittedpct")  # 修改列名
admittedpct_top100college <- merge(descriptive, admittedPct,      # 将学校录取率并入原数据
by = "Top100_college_apply", all.x = T)$admittedpct
## 热门学校录取率直方图
(histogram1 <- ggplot(admittedPct, aes(admittedpct)) +
geom_histogram(bins =15, fill = "dodgerblue", alpha = 0.7) +
labs(y ="学校数量", x = "录取率", title = "申请人数Top100大学的录取率分布直方图") +
plot_theme)
Range <- range(admittedPct$admittedpct, na.rm = T)  # 录取率极值
admittedPct[admittedPct$admittedpct==Range[1], ]    # 录取率最高的大学
admittedPct[admittedPct$admittedpct==Range[2], ]    # 录取率最低的大学
```
## 原始学校
```{r}
# 读入世界大学排名数据
universities <- read.table("/Users/mac/Desktop/狗熊会/留学数据/data/大学排名2018.txt", header = F, sep="\n")$V1
universities1 <- paste0("", gsub("，", "|", universities), "")
top10university <- NULL;top10_50university <- NULL;top50university <- NULL
top51_100university <- NULL;top101_200university <- NULL;top100university <- NULL
College_apply_new_ = gsub(pattern = "\\(|\\{|\\}", replacement = " ", x = descriptive$college_apply)
# 匹配学校世界排名
for(i in 1:length(College_apply_new_)){
top10university[i] = grepl(College_apply_new_[i],
paste0(universities1[1:10],collapse = "|"))
top10_50university[i] = grepl(College_apply_new_[i],
paste0(universities1[11:47],collapse = "|"))
top51_100university[i] = grepl(College_apply_new_[i],
paste0(universities1[48:61],collapse = "|"))
top101_200university[i] = grepl(College_apply_new_[i],
paste0(universities1[62:76],collapse = "|"))
}
table(top10university)
```
universities
descriptive$college_apply
universities
universities <- read.table("/Users/mac/Desktop/狗熊会/留学数据/data/大学排名2018.txt", header = F, sep="\n")$V1
universities
universities <- read.table("/Users/mac/Desktop/狗熊会/留学数据/data/大学排名（美国）.txt", header = F, sep="\n")$V1
universities
dim(universities)
length(universities)
